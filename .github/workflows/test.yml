name: Test

on:
  push:
    branches: [main, issue-*]
  workflow_dispatch:

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install
        run: yarn install

      - name: Test
        run: yarn test-unit

  e2e-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up git committer identity
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Install
        run: yarn install

      - name: Build
        run: yarn build

      - name: Test
        run: yarn test-e2e

  integration-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Import GPG key
        id: import-gpg
        uses: crazy-max/ghaction-import-gpg@v4
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          git_config_global: true
          git_user_signingkey: true
          git_commit_gpgsign: false
          fingerprint: 'BD98B3F42545FF93EFF55F7F3F39AA1432CA6AD7'

      - name: Install dependencies and build
        run: yarn install && yarn build

      - name: Create job
        id: create-job
        uses: ./
        with:
          queue_name: 'Library Update [library-aaa]'
          action: 'create-job'
          job_payload: '{"field": "value", "state": "pending"}'

      - name: Mutual exclusion code
        if: ${{ steps.create-job.outputs.job_created == 'true' }}
        run: echo "Running the job that requires mutual exclusion"

      - name: Get next job
        id: get-next-job
        if: ${{ steps.create-job.outputs.job_created == 'true' }}
        uses: ./
        with:
          queue_name: 'Library Update [library-aaa]'
          action: 'next-job'

      - name: Mark job as done
        id: mark-job-as-done
        if: ${{ steps.create-job.outputs.job_created == 'true' }}
        uses: ./
        with:
          queue_name: 'Library Update [library-aaa]'
          action: 'mark-job-as-done'
          job_payload: '{"field": "value", "state": "done"}'

      - name: Show new commits
        if: ${{ steps.mark-job-as-done.outputs.job_created == 'true' }}
        run: |
          git show --show-signature ${{ steps.create-job.outputs.job_commit }}
          git show --show-signature ${{ steps.mark-job-as-done.outputs.job_commit }}
